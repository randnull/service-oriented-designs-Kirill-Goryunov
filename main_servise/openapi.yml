openapi: 3.0.3
info:
  title: Main Service
  version: 0.1.0
servers:
  - url: https://localhost:5005
paths:
  "/register":
    post:
      tags:
      - login&register
      summary: Registration
      operationId: registration_register_post
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/RegisterModel"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
        '404':
          description: Username already taken
          content:
            application/json:
              schema: {}
  "/login":
    post:
      tags:
      - login&register
      summary: Auth User
      operationId: auth_user_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              "$ref": "#/components/schemas/Body_auth_user_login_post"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
        '404':
          description: Not found
          content:
            application/json:
              schema: {}
  "/profile":
    get:
      tags:
      - user
      summary: Get Current User
      operationId: get_current_user_profile_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      security:
      - OAuth2PasswordBearer: []
  "/update":
    put:
      tags:
      - user
      summary: Update
      operationId: update_update_put
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateModel"
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/HTTPValidationError"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: {}
      security:
      - OAuth2PasswordBearer: []
components:
  schemas:
    Body_auth_user_login_post:
      properties:
        grant_type:
          anyOf:
          - type: string
            pattern: password
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          title: Client Secret
      type: object
      required:
      - username
      - password
      title: Body_auth_user_login_post
    HTTPValidationError:
      properties:
        detail:
          items:
            "$ref": "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    RegisterModel:
      properties:
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
      type: object
      required:
      - username
      - password
      title: RegisterModel
    UpdateModel:
      properties:
        name:
          anyOf:
          - type: string
          title: Name
        surname:
          anyOf:
          - type: string
          title: Surname
        email:
          anyOf:
          - type: string
          title: Email
        birthday:
          anyOf:
          - type: string
          title: Birthday
        phone:
          anyOf:
          - type: string
          title: Phone
      type: object
      title: UpdateModel
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: login
tags:
- name: login&register
  description: Operations with registration and authentication
- name: user
  description: Operations with user profile